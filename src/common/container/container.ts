import 'reflect-metadata';
import { Container } from 'inversify';
import Application from '../../app/application.js';
import { Component } from '../../types/index.js';
import { ConfigInterface } from '../config/config.interface.js';
import ConfigService from '../config/config.service.js';
import LoggerService from '../logger/logger.service.js';
import { LoggerInterface } from '../logger/logger.interface.js';
import { DatabaseInterface } from '../database-client/database.interface.js';
import DatabaseService from '../database-client/database.service.js';
import { UserServiceInterface } from '../../modules/user/user-service.interface.js';
import UserService from '../../modules/user/user.service.js';
import { types } from '@typegoose/typegoose';
import { UserEntity, UserModel } from '../../modules/user/user.entity.js';
import { GoodEntity, GoodModel } from '../../modules/good/good.entity.js';
import { CityEntity, CityModel } from '../../modules/city/city.entity.js';
import { CityServiceInterface } from '../../modules/city/city-service.interface.js';
import { GoodServiceInterface } from '../../modules/good/good-service.interface.js';
import CityService from '../../modules/city/city.service.js';
import GoodService from '../../modules/good/good.service.js';
import { OfferEntity, OfferModel } from '../../modules/offer/offer.entity.js';
import { OfferServiceInterface } from '../../modules/offer/offer-service.interface.js';
import OfferService from '../../modules/offer/offer.service.js';
import { ImportCommand } from '../../cli-command/index.js';

const appContainer = new Container();

appContainer.bind<Application>(Component.Application).to(Application).inSingletonScope();
appContainer.bind<LoggerInterface>(Component.LoggerInterface).to(LoggerService).inSingletonScope();
appContainer.bind<ConfigInterface>(Component.ConfigInterface).to(ConfigService).inSingletonScope();
appContainer.bind<DatabaseInterface>(Component.DatabaseInterface).to(DatabaseService).inSingletonScope();
appContainer.bind<UserServiceInterface>(Component.UserServiceInterface).to(UserService).inSingletonScope();
appContainer.bind<CityServiceInterface>(Component.CityServiceInterface).to(CityService).inSingletonScope();
appContainer.bind<GoodServiceInterface>(Component.GoodServiceInterface).to(GoodService).inSingletonScope();
appContainer.bind<OfferServiceInterface>(Component.OfferServiceInterface).to(OfferService).inSingletonScope();
appContainer.bind<types.ModelType<UserEntity>>(Component.UserModel).toConstantValue(UserModel);
appContainer.bind<types.ModelType<GoodEntity>>(Component.GoodModel).toConstantValue(GoodModel);
appContainer.bind<types.ModelType<CityEntity>>(Component.CityModel).toConstantValue(CityModel);
appContainer.bind<types.ModelType<OfferEntity>>(Component.OfferModel).toConstantValue(OfferModel);
appContainer.bind<ImportCommand>(Component.ImportCommand).to(ImportCommand);

export { appContainer };
